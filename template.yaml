AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  task_scheduler

  Sample SAM Template for task_scheduler

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  PublisherTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-publisher-topic

  PublisherFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: sub/
      Handler: app.publisher
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref PublisherTopic
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: arn:aws:secretsmanager:ap-south-1:435464651133:secret:prod/task_scheduler-msnzQ9
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PublisherTopic.TopicName
      Events:
        publish:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /publish
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  subFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: sub/
      Handler: app.subscriber
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: arn:aws:secretsmanager:ap-south-1:435464651133:secret:prod/task_scheduler-msnzQ9
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt PublisherTopic.TopicName
      Events:
        sub:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sub
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PublisherApi:
    Description: API Gateway endpoint URL for Prod stage for publisher function
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/publish/'
  PublisherFunction:
    Description: Publisher Lambda Function ARN
    Value: !GetAtt PublisherFunction.Arn
  PublisherFunctionIamRole:
    Description: Implicit IAM Role created for publisher function
    Value: !GetAtt PublisherFunctionRole.Arn
  PublisherTopicArn:
    Description: SNS Topic ARN
    Value: !Ref PublisherTopic
  subApi:
    Description: API Gateway endpoint URL for Prod stage for sub function
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sub/'
  subFunction:
    Description: sub Lambda Function ARN
    Value: !GetAtt subFunction.Arn
  subFunctionIamRole:
    Description: Implicit IAM Role created for sub function
    Value: !GetAtt subFunctionRole.Arn
